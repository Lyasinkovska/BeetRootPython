'''
1) Чиста функція, яка виконує одну дію і повертає результат, не змінює дані, вона приймає арн=гумент, з якими працює.
2) Один клас реалізує один інтерфейс, сінгл респонсібіліті.
3)  Декораторы встроенные кого из них знаешь, статикметод, класметод, проперти должен перечислить плюсом упомянуть
абстрактметод декоратор, врапс не забыть из встроенного функтулза

@property, @classmethod, @staticmethod, @name.setter, @name.deleter, @wraps

5. Менеджер контекста где применяется зачем он вообще что надо чтоб его реализовать?
Напркилад, для роботи з файлами. Там де потрібно відкрити ,виконати певну роботу і закрити об'єкт для змін.
Реалізація: створити клас, прописати методи __enter__, __exit__

6. Тестирование какие модули
unittest , потрібно наслідуватися від класу unittest.Testcase(методи assertEqual, assertTrue, assertIn, etc.)

7. многопоточность где использовать потоки где процессоры


8. что делать если надо из разных потоков открыть и записать в файл что то
використовувати threading.Lock(). Коли починаєш зміну глобального файлу викликаєш метод acquire(), коли відпускажш
замок метод - release(). Або модна викликати через контекстний менеджер.

Теория:
9. наследование композиция агрегация паттерн Стратегия (проверить слышал ли что то про паттерны может читал)

10. какие помнишь буквы SOLID что значат
Single responsibility (один клас - одну роботу виконує)
Open for extension, closed for changes
Liskov substitution principle (дочірний клас може замінити батьківський)
Interface (різні інтерфейси для різних кліжнтів, щоб вони не мали не потрібнх методів)
Dependency  - більш високорівневі класи не можуть залежати від низьковірневих

11.
KISS  - keep it simple
DRY  - Don't repeat yourself
YAGNI ?

12) кого мог бы посоветовать послушать на ютубе по программированию.


13)откуда у __init__ появляется селф?
від методу __new__, він створює інстанс класу і його повертає

13)как в пайтоне реализовать паттерн синглтон
за допомогою методу __new__. Його потрібно переписати і вказати умови за який створити лише один інстанс класу.
Перед цим робити перевірку счи такий інстанс уже стоврений.

'''
from functools import wraps

"""
4) А сам написать декоратор который повторяет функцию сколько то раз если она выкинула исключение?
    или Декоратор который позволяет вызвать функцию только один раз а последующие вызовы ничего не делает."""


def count_times(times=3):
    def outer(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            for i in range(times):
                result = func(*args, **kwargs)
                print(i, result)

        return wrapper

    return outer


@count_times(5)
def add(numb1, numb2):
    return numb1, numb2


if __name__ == '__main__':
    add(2, 3)
